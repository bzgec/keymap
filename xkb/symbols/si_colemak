// Generated by KLFC 1.5.6
// https://github.com/39aldo39/klfc

default
xkb_symbols "basic" {
    key <AE01> { [            1,       exclam,   dead_tilde,   asciitilde ] };
    key <AE02> { [            2,     quotedbl,   dead_caron,        caron ] };
    key <AE03> { [            3,   numbersign, dead_circumflex,  asciicircum ] };
    key <AE04> { [            4,       dollar,   dead_breve,        breve ] };
    key <AE05> { [            5,      percent, dead_abovering,       degree ] };
    key <AE06> { [            6,    ampersand,  dead_ogonek,       ogonek ] };
    key <AE07> { [        equal,         plus,   dead_grave,        grave ] };
    key <AE08> { [            7,        slash, dead_abovedot,     abovedot ] };
    key <AE09> { [            8,     asterisk,   dead_acute,   apostrophe ] };
    key <AE10> { [            9,    parenleft, dead_doubleacute,  doubleacute ] };
    key <AE11> { [            0,   parenright, dead_diaeresis,    diaeresis ] };
    key <AE12> { [        minus,   underscore, dead_cedilla,      cedilla ] };
    key <AD01> { [            q,            Q,    backslash,  Greek_OMEGA ] };
    key <AD02> { [            w,            W,          bar,      Lstroke ] };
    key <AD03> { [            f,            F,     EuroSign,     EuroSign ] };
    key <AD04> { [            p,            P,    paragraph,   registered ] };
    key <AD05> { [            b,            B,       tslash,       Tslash ] };
    key <AD06> { [  bracketleft,    braceleft,    leftarrow,          yen ] };
    key <AD07> { [            j,            J,    downarrow,      uparrow ] };
    key <AD08> { [            l,            L,   rightarrow,     idotless ] };
    key <AD09> { [            u,            U,       oslash,       Oslash ] };
    key <AD10> { [            z,            Z,       zcaron,       Zcaron ] };
    key <AD11> { [    semicolon,        colon,     division, dead_abovering ] };
    key <AD12> { [        slash,     question,     multiply,  dead_macron ] };
    key <AC01> { [            a,            A,           ae,           AE ] };
    key <AC02> { [            r,            R, doublelowquotemark, guillemotright ] };
    key <AC03> { [            s,            S,       scaron,       Scaron ] };
    key <AC04> { [            t,            T,  bracketleft,  ordfeminine ] };
    key <AC05> { [            g,            G, bracketright,          ENG ] };
    key <AC06> { [ bracketright,   braceright,      hstroke,      Hstroke ] };
    key <AC07> { [            m,            M,    dead_hook,    dead_horn ] };
    key <AC08> { [            n,            N,      lstroke,    ampersand ] };
    key <AC09> { [            e,            E,      lstroke,      Lstroke ] };
    key <AC10> { [            i,            I,   dead_acute, dead_doubleacute ] };
    key <AC11> { [            o,            O,       ssharp,   dead_caron ] };
    key <TLDE> { [      cedilla,    diaeresis,      notsign,      notsign ] };
    key <BKSL> { [   apostrophe,     quotedbl,     currency,   dead_breve ] };
    key <LSGT> { [            y,            Y,       emdash,       endash ] };
    key <AB01> { [            x,            X, leftsinglequotemark, guillemotright ] };
    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AB02> { [            c,            C,       ccaron,       Ccaron ] };
    key <AB03> { [            d,            D,         cent,    copyright ] };
    key <AB04> { [            v,            V,           at,        grave ] };
    key <AB05> { [       cacute,       Cacute,    braceleft,   apostrophe ] };
    key.type[Group1] = "FOUR_LEVEL";
    key <AB06> { [    backslash,          bar,   braceright,   braceright ] };
    key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";
    key <AB07> { [            k,            K,      section,    masculine ] };
    key <AB08> { [            h,            H,     multiply,         less ] };
    key.type[Group1] = "FOUR_LEVEL";
    key <AB09> { [        comma,         less,      greater,     division ] };
    key <AB10> { [       period,      greater,       emdash,       endash ] };
    key.type[Group1] = "ONE_LEVEL";
    key <CAPS> { [ ISO_Level5_Shift ],
                 actions[Group1] = [ SetMods(mods=LevelFive) ],
                 vmods=LevelFive };
    modifier_map Mod3 { ISO_Level5_Shift };
    key <CAPS> { [BackSpace] };
    key.type[Group1] = "TWO_LEVEL";
    key <KPDL> { [    KP_Delete, KP_Separator ] };
    include "level3(ralt_switch)"
};
